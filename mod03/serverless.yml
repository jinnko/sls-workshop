# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mod03
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

#
# plugins
#
plugins:
  - serverless-export-env
  - serverless-cloudside-plugin
  - serverless-export-outputs

#
# custom
#
custom:
  name: jiko

  export-env:
    overwrite: true

  exportOutputs:
    include:
      - E2eTestQueueUrl
      - CognitoUserPoolServerClientId
    output:
      file: ./.env-outputs

#
# provider
#
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  architecture: arm64

  stackTags:
    Name: jiko

  stage: jiko
  region: eu-west-1

  deploymentBucket:
    name: trint-workshop-sls-delpoyment-${env:AWS_REGION}

  eventBridge:
    useCloudFormation: true

  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: !GetAtt RestaurantsTable.Arn
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants
    - Effect: Allow
      Action: ssm:GetParameters*
      Resource:
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/get-restaurants/config
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/search-restaurants/config
        - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/search-restaurants/secretString
    - Effect: Allow
      Action: kms:Decrypt
      Resource: ${ssm:/${self:service}/${self:provider.stage}/kmsArn}
    - Effect: Allow
      Action: events:PutEvents
      Resource: !GetAtt EventBus.Arn
    - Effect: Allow
      Action: sns:Publish
      Resource: !Ref RestaurantNotificationTopic

  environment:
    serviceName: ${self:service}
    stage: ${self:provider.stage}
    rest_api_url:
      Fn::Join:
        - ""
        - - https://
          - !Ref ApiGatewayRestApi
          - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}

#
# package
#
package:
  patterns:
    - '!package-lock.json'
    - '!package.json'

#
# functions
#
functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api:
        Fn::Join:
        - ""
        - - https://
          - !Ref ApiGatewayRestApi
          - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      cognito_server_client_id: !Ref ServerCognitoUserPoolClient
      orders_api:
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/orders

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      restaurants_table: !Ref RestaurantsTable

  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      bus_name: !Ref EventBus

  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: !Ref EventBus
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic

#
# resources
#
resources:
  Conditions:
    IsE2eTest:
      Fn::Equals:
        - ${self:provider.stage}
        - jiko

  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolTags:
          Name: jiko
        UserPoolName: jiko
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED
    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${self:provider.stage}/serviceUrl
        Value:
          Fn::Join:
            - ""
            - - https://
              - !Ref ApiGatewayRestApi
              - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${self:service}_${self:provider.stage}
    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic

    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1
    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal: "*"
            Action: SQS:SendMessage
            Resource: !GetAtt E2eTestQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref RestaurantNotificationTopic
    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false
        Region: !Ref AWS::Region
        TopicArn: !Ref RestaurantNotificationTopic

  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    EventBusName:
      Value: !Ref EventBus

    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName

    RestaurantNotificationTopicArn:
      Value: !Ref RestaurantNotificationTopic

    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue
